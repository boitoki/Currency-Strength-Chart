// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© boitoki

//@version=5
//@see https://currency-strength.com/
//@see https://currency-strength.com/about.html
indicator('Currency Strength Chart', overlay=false, precision=2, max_labels_count=100, max_lines_count=100)

// import
import boitoki/AwesomeColor/3 as ac
import boitoki/ma_function/3 as ma

////////////////////
// Defines
////////////////////
noneColor = color.new(color.black, 100)
GP1 = 'General'
GP2 = 'Display'
GP3 = 'Colors'
GP4 = 'Panel'
GP5 = 'Source'
GP6 = 'Options'
GP7 = 'Line style'
GP8 = 'Label style'
GP9 = 'Currency pair strength'
EUR_FLAG = 'ðŸ‡ªðŸ‡º'
USD_FLAG = 'ðŸ‡ºðŸ‡¸'
JPY_FLAG = 'ðŸ‡¯ðŸ‡µ'
CHF_FLAG = 'ðŸ‡¨ðŸ‡­'
GBP_FLAG = 'ðŸ‡¬ðŸ‡§'
AUD_FLAG = 'ðŸ‡¦ðŸ‡º'
CAD_FLAG = 'ðŸ‡¨ðŸ‡¦'
NZD_FLAG = 'ðŸ‡³ðŸ‡¿'
t_reso_customize    = 'Resolution'
t_reso_lookback     = 'Lookback periods'
t_reso_auto         = 'Auto'
t_calc_every        = 'every ticks'
t_calc_after        = 'after the bar closed'
t_histogram_option1 = 'Lines only'
t_histogram_option2 = 'Histogram'
t_histogram_option3 = 'Without lines'

////////////////////
// Functions
////////////////////
f_reso (_mode, _auto, _input) => 
    switch _mode
        t_reso_auto => _auto
        t_reso_lookback => timeframe.period
        t_reso_customize => _input
        => _input

f_calculated_by (_type, _source, _length, _smooth) =>
    switch _type
        'RSI' => ta.rsi(_source, _length)
        'CCI' => ta.cci(_source, _length) + 1000
        'Stochastics' => ta.sma(ta.stoch(_source, high, low, _length), _smooth)
        => _source

f_color (_name, _a, _b, _c, _d, _e) =>
    switch _name
        'monokai' => _a
        'monokaipro' => _b
        'panda' => _c
        'trading view' => _d
        => _e

f_matched_currency_a_by_ticker (_name) => str.startswith(syminfo.ticker, _name)

f_matched_name_by_ticker (_name) => str.contains(syminfo.ticker, _name)

////////////////////
// Inputs
////////////////////
reso_autovalue = not timeframe.isintraday ? '12M' : timeframe.multiplier >= 60 ? 'W' : timeframe.multiplier >= 240 ? 'M' : 'D'
i_reso_mode = input.string(defval=t_reso_auto, title='Mode', options=[t_reso_auto, t_reso_customize, t_reso_lookback], group=GP1)
i_reso_value = input.timeframe(defval='D', title='Resolution', group=GP1, tooltip='When you choose the "Resolution" on the mode.')
i_reso_lookback = i_reso_mode == t_reso_lookback ? input.int(defval=100, title='Lookback periods', minval=1, group=GP1, tooltip='When you choose the "Lookback periods" on the mode.') : 1
i_broker = input.string(title='Brokers', options=['OANDA', 'FOREXCOM', 'SAXO', 'FX_IDC', 'FX'], defval='OANDA', group=GP1)
i_calclate = input.string(defval=t_calc_every, title='Calculated on', options=[t_calc_after, t_calc_every], group=GP1)

reso = f_reso(i_reso_mode, reso_autovalue, i_reso_value)
should_be_calclated = i_calclate == t_calc_after ? barstate.isconfirmed : true

////////////////////
// Source
////////////////////
i_source = input.source(defval=close, title='Source', group=GP5)
i_calc = input.string(defval='Price', title='Calculated by', options=['Price', 'RSI', 'CCI', 'Stochastics'], inline='calc', group=GP5)
i_length = input.int(defval=7, title='', inline='calc', group=GP5, tooltip='A value that is valid for non `Price`.')
i_smoothtype = input.string(defval='SMA', title='Smoothing', options=['SMA', 'EMA', 'RMA', 'WMA', 'VWMA', 'HMA', 'LSMA', 'ALMA', 'SWMA', 'TMA', 'DEMA', 'TEMA', 'MAV', 'KAMA', 'ZLEMA', 'AMA'], inline='smooth', group=GP5)
i_smooth = input.int(defval=1, title='', minval=1, inline='smooth', group=GP5)
source = f_calculated_by(i_calc, i_source, i_length, 3)

////////////////////
// Display
////////////////////
show_chart   = input.bool(true, 'Show chart', group=GP2)
is_autoSelect = input.string(defval='No', title='Auto selected', options=['Yes', 'No'], inline='10', group=GP2) == 'Yes'
is_histogram = input.string(t_histogram_option1, title='', options=[t_histogram_option1, t_histogram_option2, t_histogram_option3], inline='10', group=GP2)
is_histogram_without_lines = is_histogram == t_histogram_option3

show_lines = not is_histogram_without_lines
show_fill = show_lines and is_autoSelect
show_histogram = is_histogram != t_histogram_option1

if not show_chart
    show_lines := false
    show_fill := false
    show_histogram := false

show_EUR    = input.bool(title='EUR', defval=true, group=GP2, inline='eur')
c_eur       = input.color(title='', defval=color.red, group=GP2, inline='eur')
i_eur_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='eur')
show_USD    = input.bool(title='USD', defval=true, group=GP2, inline='usd')
c_usd       = input.color(title='', defval=color.orange, group=GP2, inline='usd')
i_usd_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='usd')
show_JPY    = input.bool(title='JPY', defval=true, group=GP2, inline='jpy')
c_jpy       = input.color(title='', defval=color.aqua, group=GP2, inline='jpy')
i_jpy_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='jpy')
show_GBP    = input.bool(title='GBP', defval=true, group=GP2, inline='gbp')
c_gbp       = input.color(title='', defval=color.green, group=GP2, inline='gbp')
i_gbp_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='gbp')
show_CHF    = input.bool(title='CHF', defval=true, group=GP2, inline='chf')
c_chf       = input.color(title='', defval=color.maroon, group=GP2, inline='chf')
i_chf_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='chf')
show_AUD    = input.bool(title='AUD', defval=true, group=GP2, inline='aud')
c_aud       = input.color(title='', defval=color.blue, group=GP2, inline='aud')
i_aud_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='aud')
show_CAD    = input.bool(title='CAD', defval=true, group=GP2, inline='cad')
c_cad       = input.color(title='', defval=color.purple, group=GP2, inline='cad')
i_cad_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='cad')
show_NZD    = input.bool(title='NZD', defval=true, group=GP2, inline='nzd')
c_nzd       = input.color(title='', defval=color.fuchsia, group=GP2, inline='nzd')
i_nzd_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='nzd')
show_XAU    = input.bool(title='XAU', defval=false,group=GP2, inline='xau')
c_xau       = input.color(title='', defval=#D7BE69, group=GP2, inline='xau')
i_xau_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='xau')
show_XAG    = input.bool(title='XAG', defval=false, group=GP2, inline='xag')
c_xag       = input.color(title='', defval=color.silver, group=GP2, inline='xag')
i_xag_width = input.int(title='', defval=2, options=[1,2,3,4,5,6,7,8,9,10], group=GP2, inline='xag')

i_theme = input.string(title="Color theme", defval="monokai", options=["monokai", "monokai pro", "panda", "trading view", "customize"], group=GP2)
i_histogram_color = input.string(defval="Flat", title="Histogram color is", options=['Flat', 'Depth'], group=GP2)
should_be_text_black = (i_theme == 'monokai' or i_theme == 'monokai pro' or i_theme == 'panda')

if is_autoSelect
    show_EUR := f_matched_name_by_ticker('EUR'), show_USD := f_matched_name_by_ticker('USD'), show_JPY := f_matched_name_by_ticker('JPY')
    show_GBP := f_matched_name_by_ticker('GBP'), show_CHF := f_matched_name_by_ticker('CHF'), show_AUD := f_matched_name_by_ticker('AUD')
    show_CAD := f_matched_name_by_ticker('CAD'), show_NZD := f_matched_name_by_ticker('NZD')
    show_XAU := false, show_XAG := false


var float v1_EURUSD = na, var float v2_EURUSD = na
var float v1_USDJPY = na, var float v2_USDJPY = na
var float v1_USDCHF = na, var float v2_USDCHF = na
var float v1_GBPUSD = na, var float v2_GBPUSD = na
var float v1_AUDUSD = na, var float v2_AUDUSD = na
var float v1_USDCAD = na, var float v2_USDCAD = na
var float v1_NZDUSD = na, var float v2_NZDUSD = na
var float v1_XAUUSD = na, var float v2_XAUUSD = na
var float v1_XAGUSD = na, var float v2_XAGUSD = na

v1_EURUSD := should_be_calclated ? request.security(i_broker + ':EURUSD', timeframe.period, source) : v1_EURUSD[1]
v1_USDJPY := should_be_calclated ? request.security(i_broker + ':USDJPY', timeframe.period, source) : v1_USDJPY[1]
v1_USDCHF := should_be_calclated ? request.security(i_broker + ':USDCHF', timeframe.period, source) : v1_USDCHF[1]
v1_GBPUSD := should_be_calclated ? request.security(i_broker + ':GBPUSD', timeframe.period, source) : v1_GBPUSD[1]
v1_AUDUSD := should_be_calclated ? request.security(i_broker + ':AUDUSD', timeframe.period, source) : v1_AUDUSD[1]
v1_USDCAD := should_be_calclated ? request.security(i_broker + ':USDCAD', timeframe.period, source) : v1_USDCAD[1]
v1_NZDUSD := should_be_calclated ? request.security(i_broker + ':NZDUSD', timeframe.period, source) : v1_NZDUSD[1]
v1_XAUUSD := should_be_calclated and show_XAU ? request.security(i_broker + ':XAUUSD', timeframe.period, source) : v1_XAUUSD[1]
v1_XAGUSD := should_be_calclated and show_XAG ? request.security(i_broker + ':XAGUSD', timeframe.period, source) : v1_XAGUSD[1]

v2_EURUSD := should_be_calclated ? request.security(i_broker + ':EURUSD', reso, source[i_reso_lookback], barmerge.gaps_off, barmerge.lookahead_on) : v2_EURUSD[1]
v2_USDJPY := should_be_calclated ? request.security(i_broker + ':USDJPY', reso, source[i_reso_lookback], barmerge.gaps_off, barmerge.lookahead_on) : v2_USDJPY[1]
v2_USDCHF := should_be_calclated ? request.security(i_broker + ':USDCHF', reso, source[i_reso_lookback], barmerge.gaps_off, barmerge.lookahead_on) : v2_USDCHF[1]
v2_GBPUSD := should_be_calclated ? request.security(i_broker + ':GBPUSD', reso, source[i_reso_lookback], barmerge.gaps_off, barmerge.lookahead_on) : v2_GBPUSD[1]
v2_AUDUSD := should_be_calclated ? request.security(i_broker + ':AUDUSD', reso, source[i_reso_lookback], barmerge.gaps_off, barmerge.lookahead_on) : v2_AUDUSD[1]
v2_USDCAD := should_be_calclated ? request.security(i_broker + ':USDCAD', reso, source[i_reso_lookback], barmerge.gaps_off, barmerge.lookahead_on) : v2_USDCAD[1]
v2_NZDUSD := should_be_calclated ? request.security(i_broker + ':NZDUSD', reso, source[i_reso_lookback], barmerge.gaps_off, barmerge.lookahead_on) : v2_NZDUSD[1]
v2_XAUUSD := should_be_calclated and show_XAU ? request.security(i_broker + ':XAUUSD', reso, source[i_reso_lookback], barmerge.gaps_off, barmerge.lookahead_on) : v2_XAUUSD[1]
v2_XAGUSD := should_be_calclated and show_XAU ? request.security(i_broker + ':XAGUSD', reso, source[i_reso_lookback], barmerge.gaps_off, barmerge.lookahead_on) : v2_XAGUSD[1]

////////////////////
// Other settings
////////////////////

// Labels
i_label_shows = input.bool(title='Name label', defval=true, inline='name_label', group=GP8)
i_label_size = input.string(size.normal, '', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], inline='name_label', group=GP8)
i_line_style = input.string(line.style_dotted, '', options=[line.style_solid, line.style_dotted, line.style_dashed], inline="name_label", group=GP8)
i_label_offset = input.int(5, '', minval=0, inline='name_label', group=GP8)
i_label_style = label.style_label_left

x1_label = bar_index + i_label_offset
x1_line = bar_index
x2_line = x1_label

// Panel
i_panel_show = input.bool(title='Panel', defval=true, inline='panel_display', group=GP4)
i_panel_flagsize = input.string(title='Flag', defval=size.large, options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], inline='panel_display', group=GP4)
i_panel_textsize = input.string(title='Text', defval=size.normal, options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], inline='panel_display', group=GP4)
i_tableYpos = input.string('top', title='Position', options = ['top', 'middle', 'bottom'], inline='11', group=GP4)
i_tableXpos = input.string('right', title='', options=['left', 'center', 'right'], inline='11', group=GP4)
i_panel_position = i_tableYpos + '_' + i_tableXpos
i_panel_theme = 'multi'

// Currency pair strength
i_pair_show = input.bool(title="Currency pair strength", defval=false, inline='pair_display', group=GP9)
i_pair_color = str.lower(input.string(title='Color', defval='Dark', options=['Dark', 'light'], inline='pair_display', group=GP9))
i_pair_ypos = input.string('bottom', title='Position', options = ['top', 'middle', 'bottom'], inline='pair_position', group=GP9)
i_pair_xpos = input.string('right', title='', options=['left', 'center', 'right'], inline='pair_position', group=GP9)
i_pair_position = i_pair_ypos + '_' + i_pair_xpos


// Options
i_levels_show = input.bool(title='Level lines', defval=false, group=GP6)
i_levels = input.int(title='Level (Â±)', minval=1, defval=10, group=GP6)
c_levels = i_levels_show ? color.gray : na


// Color themes
c_green = ac.tradingview('green')
c_red   = ac.tradingview('red')
c_black = ac.tradingview('black')
c_eur   := f_color(i_theme, ac.monokai('pink'), ac.monokaipro('pink'), ac.panda('red'), ac.tradingview_flag('red'), c_eur)
c_usd   := f_color(i_theme, ac.monokai('orange'), ac.monokaipro('orange'), ac.panda('orange'), ac.tradingview_flag('orange'), c_usd)
c_jpy   := f_color(i_theme, c_jpy, c_jpy, c_jpy, ac.tradingview_flag('cyan'), c_jpy)
c_gbp   := f_color(i_theme, ac.monokai('green'), ac.monokaipro('green'), ac.panda('green'), ac.tradingview_flag('green'), c_gbp)
c_cad   := f_color(i_theme, ac.monokai('purple'), ac.monokaipro('purple'), ac.panda('purple'), ac.tradingview_flag('purple'), c_cad)
c_aud   := f_color(i_theme, ac.monokai('blue'), ac.monokaipro('blue'), ac.panda('blue'), ac.tradingview_flag('blue'), c_aud)
c_green := f_color(i_theme, ac.monokai('green'), ac.monokaipro('green'), ac.panda('green'), ac.tradingview_flag('green'), c_green)
c_red   := f_color(i_theme, ac.monokai('pink'), ac.monokaipro('pink'), ac.panda('red'), ac.tradingview_flag('red'), c_red)
c_black := f_color(i_theme, ac.monokai('black'), ac.monokaipro('black'), ac.panda('very-dark-gray'), c_black, c_black)

////////////////////
// Functions
////////////////////
get_value_by_name (v, _EUR, _USD, _JPY, _CHF, _GBP, _AUD, _CAD, _NZD) =>
	v == 'EUR' ? _EUR : v == 'USD' ? _USD : v == 'JPY' ? _JPY : v == 'CHF' ? _CHF : v == 'GBP' ? _GBP : v == 'AUD' ? _AUD : v == 'CAD' ? _CAD : v == 'NZD' ? _NZD : na

get_name_by_value(v, _EUR, _USD, _JPY, _CHF, _GBP, _AUD, _CAD, _NZD) =>
    v == _EUR ? 'EUR' : v == _USD ? 'USD' : v == _JPY ? 'JPY' : v == _CHF ? 'CHF' : v == _GBP ? 'GBP' : v == _AUD ? 'AUD' : v == _CAD ? 'CAD' : v == _NZD ? 'NZD' : na

get_color_by_value(v, _EUR, _USD, _JPY, _CHF, _GBP, _AUD, _CAD, _NZD) =>
    v == _EUR ? c_eur : v == _USD ? c_usd : v == _JPY ? c_jpy : v == _CHF ? c_chf : v == _GBP ? c_gbp : v == _AUD ? c_aud : v == _CAD ? c_cad : v == _NZD ? c_nzd : na

get_flag_by_value(v, _EUR, _USD, _JPY, _CHF, _GBP, _AUD, _CAD, _NZD) =>
    v == _EUR ? EUR_FLAG : v == _USD ? USD_FLAG : v == _JPY ? JPY_FLAG : v == _CHF ? CHF_FLAG : v == _GBP ? GBP_FLAG : v == _AUD ? AUD_FLAG : v == _CAD ? CAD_FLAG : v == _NZD ? NZD_FLAG : na

get_pair_by_value (_v, _EURUSD, _USDJPY, _USDCHF, _GBPUSD, _AUDUSD , _USDCAD, _NZDUSD) =>
    _v == _EURUSD ? 'EUR\nUSD' : _v == _USDJPY ? 'USD\nJPY' : _v == _USDCHF ? 'USD\nCHF' : _v == _GBPUSD ? 'GBP\nUSD' : _v == _AUDUSD ? 'AUD\nUSD' : _v == _USDCAD ? 'USD\nCAD' : _v == _NZDUSD ? 'NZD\nUSD' : na

get_val(_v1, _v2) =>
    float res = 0

    if _v2 == 0
        res := 0
        res
    else
        res := math.log(_v1 / _v2) * 10000
        res

    res

get_val_m(_v1, _v2, _v3, _v4) =>
    float res = 0
    float v1 = _v1 * _v3
    float v2 = _v2 * _v4

    if _v2 == 0
        res := 0
        res
    else
        res := math.log(v1 / v2) * 10000
        res

    res

get_val_d(_v1, _v2, _v3, _v4) =>
    float res = 0

    if _v3 == 0 or _v4 == 0
        res := 0
        res
    else
        float v1 = _v1 / _v3
        float v2 = _v2 / _v4

        if v2 == 0
            res := 0
            res
        else
            res := math.log(v1 / v2) * 10000
            res

    res


////////////////////
// Calculating
////////////////////
var float EURUSD = na, var float DELTA_EURUSD = na
var float USDJPY = na, var float DELTA_USDJPY = na
var float USDCHF = na, var float DELTA_USDCHF = na
var float GBPUSD = na, var float DELTA_GBPUSD = na
var float AUDUSD = na, var float DELTA_AUDUSD = na
var float USDCAD = na, var float DELTA_USDCAD = na
var float NZDUSD = na, var float DELTA_NZDUSD = na
var float EURJPY = na, var float DELTA_EURJPY = na
var float EURCHF = na, var float DELTA_EURCHF = na
var float EURGBP = na, var float DELTA_EURGBP = na
var float EURCAD = na, var float DELTA_EURCAD = na
var float EURAUD = na, var float DELTA_EURAUD = na
var float EURNZD = na, var float DELTA_EURNZD = na
var float EURXAU = na, var float DELTA_EURXAU = na
var float EURXAG = na, var float DELTA_EURXAG = na
var float GBPCHF = na, var float DELTA_GBPCHF = na
var float GBPJPY = na, var float DELTA_GBPJPY = na
var float GBPCAD = na, var float DELTA_GBPCAD = na
var float GBPAUD = na, var float DELTA_GBPAUD = na
var float GBPNZD = na, var float DELTA_GBPNZD = na
var float AUDCHF = na, var float DELTA_AUDCHF = na
var float AUDJPY = na, var float DELTA_AUDJPY = na
var float AUDCAD = na, var float DELTA_AUDCAD = na
var float AUDNZD = na, var float DELTA_AUDNZD = na
var float NZDCAD = na, var float DELTA_NZDCAD = na
var float NZDCHF = na, var float DELTA_NZDCHF = na
var float NZDJPY = na, var float DELTA_NZDJPY = na
var float CADJPY = na, var float DELTA_CADJPY = na
var float CADCHF = na, var float DELTA_CADCHF = na
var float CHFJPY = na, var float DELTA_CHFJPY = na

var float XAUUSD = na
var float XAGUSD = na
var float XAUJPY = na
var float XAUCHF = na
var float XAUGBP = na
var float XAUCAD = na
var float XAUAUD = na
var float XAUNZD = na
var float XAGJPY = na
var float XAGCHF = na
var float XAGGBP = na
var float XAGCAD = na
var float XAGAUD = na
var float XAGNZD = na

EURUSD := should_be_calclated ? get_val(v1_EURUSD, v2_EURUSD) : EURUSD[1]
USDJPY := should_be_calclated ? get_val(v1_USDJPY, v2_USDJPY) : USDJPY[1]
USDCHF := should_be_calclated ? get_val(v1_USDCHF, v2_USDCHF) : USDCHF[1]
GBPUSD := should_be_calclated ? get_val(v1_GBPUSD, v2_GBPUSD) : GBPUSD[1]
AUDUSD := should_be_calclated ? get_val(v1_AUDUSD, v2_AUDUSD) : AUDUSD[1]
USDCAD := should_be_calclated ? get_val(v1_USDCAD, v2_USDCAD) : USDCAD[1]
NZDUSD := should_be_calclated ? get_val(v1_NZDUSD, v2_NZDUSD) : NZDUSD[1]
XAUUSD := should_be_calclated ? get_val(v1_XAUUSD, v2_XAUUSD) : XAUUSD[1]
XAGUSD := should_be_calclated ? get_val(v1_XAGUSD, v2_XAGUSD) : XAGUSD[1]
EURJPY := should_be_calclated ? get_val_m(v1_EURUSD, v2_EURUSD, v1_USDJPY, v2_USDJPY) : EURJPY[1]
EURCHF := should_be_calclated ? get_val_m(v1_EURUSD, v2_EURUSD, v1_USDCHF, v2_USDCHF) : EURCHF[1]
EURGBP := should_be_calclated ? get_val_d(v1_EURUSD, v2_EURUSD, v1_GBPUSD, v2_GBPUSD) : EURGBP[1]
EURCAD := should_be_calclated ? get_val_m(v1_EURUSD, v2_EURUSD, v1_USDCAD, v2_USDCAD) : EURCAD[1]
EURAUD := should_be_calclated ? get_val_d(v1_EURUSD, v2_EURUSD, v1_AUDUSD, v2_AUDUSD) : EURAUD[1]
EURNZD := should_be_calclated ? get_val_d(v1_EURUSD, v2_EURUSD, v1_NZDUSD, v2_NZDUSD) : EURNZD[1]
EURXAU := should_be_calclated ? get_val_d(v1_EURUSD, v2_EURUSD, v1_XAUUSD, v2_XAUUSD) : EURXAU[1]
EURXAG := should_be_calclated ? get_val_d(v1_EURUSD, v2_EURUSD, v1_XAGUSD, v2_XAGUSD) : EURXAG[1]
GBPCHF := should_be_calclated ? get_val_m(v1_GBPUSD, v2_GBPUSD, v1_USDCHF, v2_USDCHF) : GBPCHF[1]
GBPJPY := should_be_calclated ? get_val_m(v1_GBPUSD, v2_GBPUSD, v1_USDJPY, v2_USDJPY) : GBPJPY[1]
GBPCAD := should_be_calclated ? get_val_m(v1_GBPUSD, v2_GBPUSD, v1_USDCAD, v2_USDCAD) : GBPCAD[1]
GBPAUD := should_be_calclated ? get_val_d(v1_GBPUSD, v2_GBPUSD, v1_AUDUSD, v2_AUDUSD) : GBPAUD[1]
GBPNZD := should_be_calclated ? get_val_d(v1_GBPUSD, v2_GBPUSD, v1_NZDUSD, v2_NZDUSD) : GBPNZD[1]
AUDCHF := should_be_calclated ? get_val_m(v1_AUDUSD, v2_AUDUSD, v1_USDCHF, v2_USDCHF) : AUDCHF[1]
AUDJPY := should_be_calclated ? get_val_m(v1_AUDUSD, v2_AUDUSD, v1_USDJPY, v2_USDJPY) : AUDJPY[1]
AUDCAD := should_be_calclated ? get_val_m(v1_AUDUSD, v2_AUDUSD, v1_USDCAD, v2_USDCAD) : AUDCAD[1]
AUDNZD := should_be_calclated ? get_val_d(v1_AUDUSD, v2_AUDUSD, v1_NZDUSD, v2_NZDUSD) : AUDNZD[1]
NZDCAD := should_be_calclated ? get_val_m(v1_NZDUSD, v2_NZDUSD, v1_USDCAD, v2_USDCAD) : NZDCAD[1]
NZDCHF := should_be_calclated ? get_val_m(v1_NZDUSD, v2_NZDUSD, v1_USDCHF, v2_USDCHF) : NZDCHF[1]
NZDJPY := should_be_calclated ? get_val_m(v1_NZDUSD, v2_NZDUSD, v1_USDJPY, v2_USDJPY) : NZDJPY[1]
CADJPY := should_be_calclated ? get_val_d(v1_USDJPY, v2_USDJPY, v1_USDCAD, v2_USDCAD) : CADJPY[1]
CADCHF := should_be_calclated ? get_val_d(v1_USDCHF, v2_USDCHF, v1_USDCAD, v2_USDCAD) : CADCHF[1]
CHFJPY := should_be_calclated ? get_val_d(v1_USDJPY, v2_USDJPY, v1_USDCHF, v2_USDCHF) : CHFJPY[1]
XAUJPY := should_be_calclated ? get_val_m(v1_XAUUSD, v2_XAUUSD, v1_USDJPY, v2_USDJPY) : XAUJPY[1]
XAUCHF := should_be_calclated ? get_val_m(v1_XAUUSD, v2_XAUUSD, v1_USDCHF, v2_USDCHF) : XAUCHF[1]
XAUGBP := should_be_calclated ? get_val_d(v1_XAUUSD, v2_XAUUSD, v1_GBPUSD, v2_GBPUSD) : XAUGBP[1]
XAUCAD := should_be_calclated ? get_val_m(v1_XAUUSD, v2_XAUUSD, v1_USDCAD, v2_USDCAD) : XAUCAD[1]
XAUAUD := should_be_calclated ? get_val_d(v1_XAUUSD, v2_XAUUSD, v1_AUDUSD, v2_AUDUSD) : XAUAUD[1]
XAUNZD := should_be_calclated ? get_val_d(v1_XAUUSD, v2_XAUUSD, v1_NZDUSD, v2_NZDUSD) : XAUNZD[1]
XAGJPY := should_be_calclated ? get_val_m(v1_XAGUSD, v2_XAGUSD, v1_USDJPY, v2_USDJPY) : XAGJPY[1]
XAGCHF := should_be_calclated ? get_val_m(v1_XAGUSD, v2_XAGUSD, v1_USDCHF, v2_USDCHF) : XAGCHF[1]
XAGGBP := should_be_calclated ? get_val_d(v1_XAGUSD, v2_XAGUSD, v1_GBPUSD, v2_GBPUSD) : XAGGBP[1]
XAGCAD := should_be_calclated ? get_val_m(v1_XAGUSD, v2_XAGUSD, v1_USDCAD, v2_USDCAD) : XAGCAD[1]
XAGAUD := should_be_calclated ? get_val_d(v1_XAGUSD, v2_XAGUSD, v1_AUDUSD, v2_AUDUSD) : XAGAUD[1]
XAGNZD := should_be_calclated ? get_val_d(v1_XAGUSD, v2_XAGUSD, v1_NZDUSD, v2_NZDUSD) : XAGNZD[1]

EUR = ma.calc(i_smoothtype, ( EURUSD + EURJPY + EURCHF + EURGBP + EURAUD + EURCAD + EURNZD) / 7, i_smooth)
USD = ma.calc(i_smoothtype, (-EURUSD + USDJPY + USDCHF - GBPUSD - AUDUSD + USDCAD - NZDUSD) / 7, i_smooth)
JPY = ma.calc(i_smoothtype, (-EURJPY - USDJPY - CHFJPY - GBPJPY - AUDJPY - CADJPY - NZDJPY) / 7, i_smooth)
CHF = ma.calc(i_smoothtype, (-EURCHF - USDCHF + CHFJPY - GBPCHF - AUDCHF - CADCHF - NZDCHF) / 7, i_smooth)
GBP = ma.calc(i_smoothtype, (-EURGBP + GBPUSD + GBPCHF + GBPJPY + GBPAUD + GBPCAD + GBPNZD) / 7, i_smooth)
AUD = ma.calc(i_smoothtype, (-EURAUD + AUDUSD + AUDJPY + AUDCHF - GBPAUD + AUDCAD + AUDNZD) / 7, i_smooth)
CAD = ma.calc(i_smoothtype, (-EURCAD - USDCAD + CADJPY + CADCHF - GBPCAD - AUDCAD - NZDCAD) / 7, i_smooth)
NZD = ma.calc(i_smoothtype, (-EURNZD + NZDUSD + NZDJPY + NZDCHF - GBPNZD + NZDCAD - AUDNZD) / 7, i_smooth)
XAU = ma.calc(i_smoothtype, (-EURXAU + XAUUSD + XAUJPY + XAUCHF + XAUGBP + XAUAUD + XAUCAD + XAUNZD) / 8, i_smooth)
XAG = ma.calc(i_smoothtype, (-EURXAG + XAGUSD + XAGJPY + XAGCHF + XAGGBP + XAGAUD + XAGCAD + XAGNZD) / 8, i_smooth)

// Delta
//========
currency_a = str.substring(syminfo.ticker, 0, 3)
currency_b = str.substring(syminfo.ticker, 3)
currency_a_value = get_value_by_name(currency_a, EUR, USD, JPY, CHF, GBP, AUD, CAD, NZD)
currency_b_value = get_value_by_name(currency_b, EUR, USD, JPY, CHF, GBP, AUD, CAD, NZD)
currency_delta = currency_a_value - currency_b_value
chg_delta = ta.change(currency_delta)

c_currency_a = get_value_by_name(currency_a, c_eur, c_usd, c_jpy, c_chf, c_gbp, c_aud, c_cad, c_nzd)
c_currency_b = get_value_by_name(currency_b, c_eur, c_usd, c_jpy, c_chf, c_gbp, c_aud, c_cad, c_nzd)
c_delta = currency_delta > 0 ? c_currency_a : c_currency_b
c_delta_transparency = 40

if i_histogram_color == 'Depth'
    c_delta_transparency := (currency_delta > 0 and chg_delta < 0) or (currency_delta < 0 and chg_delta > 0) ? 65 : 40

////////////////////
// Plotting
////////////////////
// Backgrounds
hline(0, title='Base', linestyle=hline.style_solid)
hline( i_levels, color=c_levels, title='Level +', linestyle=hline.style_dotted)
hline(-i_levels, color=c_levels, title='Level -', linestyle=hline.style_dotted)

// Histogram
plot(show_histogram ? currency_delta : na, color=color.new(c_delta, c_delta_transparency), style=plot.style_columns, editable=false)

// Lines
plot(show_XAG and show_lines? XAG : na, title='XAG', color=c_xag, linewidth=i_xag_width, editable=false)
plot(show_XAU and show_lines? XAU : na, title='XAU', color=c_xau, linewidth=i_xau_width, editable=false)
plot(show_NZD and show_lines? NZD : na, title='NZD', color=c_nzd, linewidth=i_nzd_width, editable=false)
plot(show_CAD and show_lines? CAD : na, title='CAD', color=c_cad, linewidth=i_cad_width, editable=false)
plot(show_CHF and show_lines? CHF : na, title='CHF', color=c_chf, linewidth=i_chf_width, editable=false)
plot(show_AUD and show_lines? AUD : na, title='AUD', color=c_aud, linewidth=i_aud_width, editable=false)
plot(show_GBP and show_lines? GBP : na, title='GBP', color=c_gbp, linewidth=i_gbp_width, editable=false)
plot(show_JPY and show_lines? JPY : na, title='JPY', color=c_jpy, linewidth=i_jpy_width, editable=false)
plot(show_EUR and show_lines? EUR : na, title='EUR', color=c_eur, linewidth=i_eur_width, editable=false)
plot(show_USD and show_lines? USD : na, title='USD', color=c_usd, linewidth=i_usd_width, editable=false)

plot(show_XAG and show_fill ? XAG : na, title='XAG', color=color.new(c_xag, 92), linewidth=0, style=plot.style_area, editable=false)
plot(show_XAU and show_fill ? XAU : na, title='XAU', color=color.new(c_xau, 92), linewidth=0, style=plot.style_area, editable=false)
plot(show_NZD and show_fill ? NZD : na, title='NZD', color=color.new(c_nzd, 92), linewidth=0, style=plot.style_area, editable=false)
plot(show_CAD and show_fill ? CAD : na, title='CAD', color=color.new(c_cad, 92), linewidth=0, style=plot.style_area, editable=false)
plot(show_CHF and show_fill ? CHF : na, title='CHF', color=color.new(c_chf, 92), linewidth=0, style=plot.style_area, editable=false)
plot(show_AUD and show_fill ? AUD : na, title='AUD', color=color.new(c_aud, 92), linewidth=0, style=plot.style_area, editable=false)
plot(show_GBP and show_fill ? GBP : na, title='GBP', color=color.new(c_gbp, 92), linewidth=0, style=plot.style_area, editable=false)
plot(show_JPY and show_fill ? JPY : na, title='JPY', color=color.new(c_jpy, 92), linewidth=0, style=plot.style_area, editable=false)
plot(show_EUR and show_fill ? EUR : na, title='EUR', color=color.new(c_eur, 92), linewidth=0, style=plot.style_area, editable=false)
plot(show_USD and show_fill ? USD : na, title='USD', color=color.new(c_usd, 92), linewidth=0, style=plot.style_area, editable=false)

// Lines & Labels
line XAG_LINE = na, label USD_LABEL = na
line XAU_LINE = na, label XAG_LABEL = na
line NZD_LINE = na, label XAU_LABEL = na
line CAD_LINE = na, label NZD_LABEL = na
line CHF_LINE = na, label CAD_LABEL = na
line AUD_LINE = na, label CHF_LABEL = na
line GBP_LINE = na, label AUD_LABEL = na
line JPY_LINE = na, label GBP_LABEL = na
line EUR_LINE = na, label JPY_LABEL = na
line USD_LINE = na, label EUR_LABEL = na


if barstate.islast and i_label_shows and show_lines
    line_extend = extend.none
    label_text_color = should_be_text_black ? c_black : color.white

    if show_XAG
        XAG_LINE := line.new(x1_line, XAG, x2_line, XAG, extend=line_extend, width=i_xag_width, style=i_line_style, color=c_xag), line.delete(XAG_LINE[1])
        XAG_LABEL := label.new(x1_label, XAG, 'XAG', color=c_xag, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(XAG_LABEL[1])

    if show_XAU
        XAU_LINE := line.new(x1_line, XAU, x2_line, XAU, extend=line_extend, width=i_xau_width, style=i_line_style, color=c_xau), line.delete(XAU_LINE[1])
        XAU_LABEL := label.new(x1_label, XAU, 'XAU', color=c_xau, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(XAU_LABEL[1])

    if show_NZD
        NZD_LINE := line.new(x1_line, NZD, x2_line, NZD, extend=line_extend, width=i_nzd_width, style=i_line_style, color=c_nzd), line.delete(NZD_LINE[1])
        NZD_LABEL := label.new(x1_label, NZD, 'NZD', color=c_nzd, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(NZD_LABEL[1])

    if show_CAD
        CAD_LINE := line.new(x1_line, CAD, x2_line, CAD, extend=line_extend, width=i_cad_width, style=i_line_style, color=c_cad), line.delete(CAD_LINE[1])
        CAD_LABEL := label.new(x1_label, CAD, 'CAD', color=c_cad, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(CAD_LABEL[1])

    if show_CHF
        CHF_LINE := line.new(x1_line, CHF, x2_line, CHF, extend=line_extend, width=i_chf_width, style=i_line_style, color=c_chf), line.delete(CHF_LINE[1])
        CHF_LABEL := label.new(x1_label, CHF, 'CHF', color=c_chf, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(CHF_LABEL[1])

    if show_AUD
        AUD_LINE := line.new(x1_line, AUD, x2_line, AUD, extend=line_extend, width=i_aud_width, style=i_line_style, color=c_aud), line.delete(AUD_LINE[1])
        AUD_LABEL := label.new(x1_label, AUD, 'AUD', color=c_aud, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(AUD_LABEL[1])

    if show_GBP
        GBP_LINE := line.new(x1_line, GBP, x2_line, GBP, extend=line_extend, width=i_gbp_width, style=i_line_style, color=c_gbp), line.delete(GBP_LINE[1])
        GBP_LABEL := label.new(x1_label, GBP, 'GBP', color=c_gbp, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(GBP_LABEL[1])

    if show_JPY
        JPY_LINE := line.new(x1_line, JPY, x2_line, JPY, extend=line_extend, width=i_jpy_width, style=i_line_style, color=c_jpy), line.delete(JPY_LINE[1])
        JPY_LABEL := label.new(x1_label, JPY, 'JPY', color=c_jpy, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(JPY_LABEL[1])

    if show_EUR
        EUR_LINE := line.new(x1_line, EUR, x2_line, EUR, extend=line_extend, width=i_eur_width, style=i_line_style, color=c_eur), line.delete(EUR_LINE[1])
        EUR_LABEL := label.new(x1_label, EUR, 'EUR', color=c_eur, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(EUR_LABEL[1])

    if show_USD
        USD_LINE := line.new(x1_line, USD, x2_line, USD, extend=line_extend, width=i_usd_width, style=i_line_style, color=c_usd), line.delete(USD_LINE[1])
        USD_LABEL := label.new(x1_label, USD, 'USD', color=c_usd, textcolor=label_text_color, style=i_label_style, size=i_label_size), label.delete(USD_LABEL[1])


////////////////////
// Delta
////////////////////
DELTA_EURUSD := (EUR-USD)
DELTA_USDJPY := (USD-JPY)
DELTA_USDCHF := (USD-CHF)
DELTA_GBPUSD := (GBP-USD)
DELTA_AUDUSD := (AUD-USD)
DELTA_USDCAD := (USD-CAD)
DELTA_NZDUSD := (NZD-USD)
DELTA_EURJPY := (EUR-JPY)
DELTA_EURCHF := (EUR-CHF)
DELTA_EURGBP := (EUR-GBP)
DELTA_EURCAD := (EUR-CAD)
DELTA_EURAUD := (EUR-AUD)
DELTA_EURNZD := (EUR-NZD)
DELTA_EURXAU := (EUR-XAU)
DELTA_EURXAG := (EUR-XAG)
DELTA_GBPCHF := (GBP-CHF)
DELTA_GBPJPY := (GBP-JPY)
DELTA_GBPCAD := (GBP-CAD)
DELTA_GBPAUD := (GBP-AUD)
DELTA_GBPNZD := (GBP-NZD)
DELTA_AUDCHF := (AUD-CHF)
DELTA_AUDJPY := (AUD-JPY)
DELTA_AUDCAD := (AUD-CAD)
DELTA_AUDNZD := (AUD-NZD)
DELTA_NZDCAD := (NZD-CAD)
DELTA_NZDCHF := (NZD-CHF)
DELTA_NZDJPY := (NZD-JPY)
DELTA_CADJPY := (CAD-JPY)
DELTA_CADCHF := (CAD-CHF)
DELTA_CHFJPY := (CHF-JPY)

delta_pairs = array.from(DELTA_EURUSD, DELTA_USDJPY, DELTA_USDCHF, DELTA_GBPUSD, DELTA_AUDUSD, DELTA_USDCAD, DELTA_NZDUSD)

array.sort(delta_pairs, order.descending)


if barstate.islast and i_pair_show
    var table panel_pair = table.new(i_pair_position, 2, 8), table.clear(panel_pair, 0, 0, 1,  7)
    
    c_ticker = i_pair_color == 'dark' ? ac.tradingview('lightgray') : ac.tradingview('black')
    c_pair_bull = ac.tradingview('green')
    c_pair_bear = ac.tradingview('red')
    c_pair_newt = ac.tradingview('gray')
    i_pair_strength = 30
    
    for i = 0 to array.size(delta_pairs)-1
        v_value = array.get(delta_pairs, i)
        v_label = get_pair_by_value(array.get(delta_pairs, i), DELTA_EURUSD, DELTA_USDJPY, DELTA_USDCHF, DELTA_GBPUSD, DELTA_AUDUSD, DELTA_USDCAD, DELTA_NZDUSD)
        v_color = v_value >= 0 ? c_pair_bull : c_pair_bear
        v_color := math.abs(v_value) < i_pair_strength ? c_pair_newt : v_color

        table.cell(panel_pair, 0, i, str.replace(v_label, '\n', ''), text_halign=text.align_left, text_color=c_ticker)
        table.cell(panel_pair, 1, i, str.format('{0,number,#.##}',v_value), text_halign=text.align_right, text_color=v_color)

////////////////////
// Analysis
////////////////////
sorted_by_ranking_names = array.new_string(8)
values = array.new_float(8)

if barstate.islast
    values := array.from(EUR, USD, JPY, CHF, GBP, AUD, CAD, NZD)
    array.sort(values, order.descending)

////////////////////
// Panel
////////////////////

// Table
if barstate.islast
    text_color      = c_black
    head_text_color = c_black

    var table panel = table.new(i_panel_position, 4, 8, border_color=noneColor, border_width=0, frame_color=noneColor, frame_width=0)
    table.clear(panel, 1, 0, 3, 7)

    for i = 0 to array.size(values) - 1 by 1
        value = array.get(values, i)
        n = get_name_by_value(value, EUR, USD, JPY, CHF, GBP, AUD, CAD, NZD)
        f = get_flag_by_value(value, EUR, USD, JPY, CHF, GBP, AUD, CAD, NZD)
        c = get_color_by_value(value, EUR, USD, JPY, CHF, GBP, AUD, CAD, NZD)
        v = str.format('{0, number, #.#}', value)
        r = str.tostring(i + 1)
    
        if not na(n)
            array.set(sorted_by_ranking_names, i, n)
    
        if i_panel_show
            head_bgcolor = c
            bgcolor      = c
            table.cell(panel, 0, i, r, bgcolor=head_bgcolor, text_color=head_text_color, text_size=i_panel_textsize)
            table.cell(panel, 1, i, f, bgcolor=bgcolor, text_color=text_color, text_size=i_panel_flagsize)
            table.cell(panel, 2, i, n, bgcolor=bgcolor, text_color=text_color, text_size=i_panel_textsize, text_halign=text.align_left)
            table.cell(panel, 3, i, v, bgcolor=bgcolor, text_color=text_color, text_size=i_panel_textsize, text_halign=text.align_right)

////////////////////
// Alerts
////////////////////
string the_strongest_name = na
string the_weakest_name = na

if barstate.islast and barstate.isrealtime
    float max_value = array.max(values)
    float min_value = array.min(values)
    the_strongest_name := get_name_by_value(max_value, EUR, USD, JPY, CHF, GBP, AUD, CAD, NZD)
    the_weakest_name := get_name_by_value(min_value, EUR, USD, JPY, CHF, GBP, AUD, CAD, NZD)
    bool strongest_value_changed = the_strongest_name != the_strongest_name[1]
    bool weakest_value_changed = the_weakest_name != the_weakest_name[1]
    string alert_message = array.join(sorted_by_ranking_names, ' > ')
    
    if strongest_value_changed or weakest_value_changed
        alert('NEW UPDATE: ' + alert_message, alert.freq_once_per_bar_close)
